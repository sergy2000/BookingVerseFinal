@using BookingVerseFinal.Components.Models
@using BookingVerseFinal.Components.Services
@using Microsoft.AspNetCore.Components.Forms

@inject UserService UserService;

@{ var showClass = IsVisible ? "d-block" : "d-block"; }

<div class="container text-center">
    <div class="row" style="outline-style:solid">
        <div class="col" style="outline-style:solid">col</div>
    </div>
    <div class="row" style="outline-style:solid">
        <div class="col"></div>
        <div class="col" style="outline-style:solid">
            <div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">New User</strong>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
                    </div>

                    <div class="toast-body">
                        <EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" type="email" class="form-control" @bind-Value="newUser.Email" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" class="form-control" @bind-Value="newUser.Password" />
                            </div>

                            <button type="submit" class="btn btn-primary" onclick="">Save</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="col"></div>
    </div>
    <div class="row" style="outline-style:solid">
        <div class="col" style="outline-style:solid">col</div>
    </div>
</div>


@code
{
    private Account newUser = new Account();

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public EventCallback<Account> OnUserSaved { get; set; }

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        await OnUserSaved.InvokeAsync(newUser);
        UserService.AddUser(newUser);
        Close();
    }
}
