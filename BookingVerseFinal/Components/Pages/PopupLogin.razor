@using BookingVerseFinal.Components.Models
@using BookingVerseFinal.Components.Services
@using Microsoft.AspNetCore.Components.Forms
@inject UserService us;
@inject Database Database

@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">New User</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            <EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="firstname" class="form-label">First Name</label>
                    <InputText id="firstname" class="form-control" @bind-Value="newUser.FirstName" />
                </div>

                <div class="mb-3">
                    <label for="lastname" class="form-label">Last Name</label>
                    <InputText id="lastname" class="form-control" @bind-Value="newUser.LastName" />
                </div>

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" type="email" class="form-control" @bind-Value="newUser.Email" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" @bind-Value="newUser.Password" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private User newUser = new User();

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public EventCallback<User> OnUserSaved { get; set; }

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    public void Close()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        await Database.SaveUserAsync(newUser);
        await OnUserSaved.InvokeAsync(newUser);
        Close();
    }
}
